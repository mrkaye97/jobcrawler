name: Test
'on':
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
concurrency:
  group: '${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}'
  cancel-in-progress: true
permissions:
  contents: read
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: 'postgres:15'
        env:
          POSTGRES_USER: matt
          POSTGRES_DB: jobcrawler-test
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
        ports:
          - '5432:5432'
    env:
      DATABASE_URL: '${{ secrets.DATABASE_URL }}'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: >-
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Install project
        run: poetry install --no-interaction
      - name: Run tests
        run: |
          source .venv/bin/activate
          . scripts/test.sh
          coverage report
  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master'
    env:
      DIGITALOCEAN_ACCESS_TOKEN: '${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}'
      DIGITALOCEAN_APP_ID: '${{ secrets.DIGITALOCEAN_APP_ID }}'
    steps:
      - uses: actions/checkout@v3
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: '${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}'
      - name: deploy
        run: >-
          doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }}
          --force-rebuild
